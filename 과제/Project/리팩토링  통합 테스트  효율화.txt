리팩토링 / 통합 테스트 / 효율화

0. 한 파일에 다 만듦
동작 잘 되는지 확인

1. 파일 분리
파일 분리 방식 
index.js
utils.js

3. 리팩토링(함수화)

4. csv -> 인덱스화
papaParse - 외부 모듈 -> 구분자를 통해 해당 컬럼만 가져와 리스트화
csv-parser - 내장 모듈 -> readline, 스트리밍 방식, 

(papaParse) 전체 리스트화 
-> 랜덤 액서스 용이 / 단순한 구현 BUT 높은 메모리 사용, 처리 시간, 데이터 손상 및 재처리 ... 비효율
-> 너무 오래 걸림
(csv-parser) 스트리밍으로 랜덤 액서스를 어떻게?
=> 인덱스 파일 생성
1) csv 파일의 인덱스 미리 생성(각 레코드 시작 위치 (바이트 offset 저장)
2) 이 정보로 랜덤 액서스



5. name.txt 파일로부터 이름을 가지고 오도록.


-------------------------------------------------------------------

csv 파일 자체 접근 vs 전체 파일을 리스트화 하여 접근
- 랜덤 액서스 할 거기 때문에 후자가 나음
- 스트리밍 방식 : readline, 순차 접근, 
- 랜덤 엑서스 하기 위해서는 파일의 내용을 미리 읽어 메모리에 저장해야 함.
- 스트리밍 방식은 메모리를 절약하지만, 파일을 순차적으로만 읽을 수 있어 특정 레코드에 랜덤 접근하기 어렵습니다. 반면, 전체 데이터를 한 번에 메모리에 로드하면 각 레코드에 인덱스를 통해 빠르게 접근할 수 있어 랜덤 접근이 필요할 때는 리스트 방식이 유리합니다.



